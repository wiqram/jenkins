---
apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-deployer
  namespace: jenkins
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jenkins-deployer
  namespace: jenkins
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["create","delete","get","list","patch","update","watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create","delete","get","list","patch","update","watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get","list","watch"]
  - apiGroups: [ "" ]
    resources: [ "namespaces" ]
    verbs: [ "create","delete" ]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create","delete","get","list","patch","update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create","delete","get","list","patch","update"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["create","delete","get","list","patch","update"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["create","delete","get","list","patch","update"]
  - apiGroups: [""]
    resources: ["ingresses"]
    verbs: ["create","delete","get","list","patch","update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-deployer
  namespace: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-deployer
subjects:
  - kind: ServiceAccount
    name: jenkins-deployer
    namespace: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-deployer
  namespace: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: jenkins-deployer
    namespace: jenkins
---
#apiVersion: v1
#kind: Namespace
#metadata:
#  name: yolo
#---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/jenkins
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: jenkins
#   #annotations:
#    #pv.beta.kubernetes.io/gid: "1000"
# spec:
#   capacity:
#     storage: 5Gi
#   accessModes:
#   - ReadWriteOnce
#   azureFile:
#     secretName: storage-connection
#     secretNamespace: jenkins
#     shareName: {{ .Values.jenkins.azurefileshare }}
#     readOnly: false
#   claimRef:
#     name: jenkins-pvc
#     kind: PersistenVolumeClaim
#     namespace: jenkins
#   persistentVolumeReclaimPolicy: Retain
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-claim
  namespace: jenkins
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: jenkins-pvc
#   namespace: jenkins
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 5Gi
#   storageClassName: default
#   volumeName: jenkins
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  selector:
    matchLabels:
      app: jenkins
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      namespace: jenkins
      labels:
        app: jenkins
    spec:
      serviceAccountName: jenkins-deployer
      automountServiceAccountToken: true
      containers:
        - name: jenkins
          image: jenkins/jenkins:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: JAVA_OPTS
              value: -Xmx2048m -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85
          ports:
            - containerPort: 8080
              name: httpport
            - containerPort: 50000
              name: jnlpport
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins
      restartPolicy: Always
      securityContext:
        runAsUser: 0
      terminationGracePeriodSeconds: 30
      volumes:
        - name: jenkins
          persistentVolumeClaim:
            claimName: jenkins-claim
---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: ClusterRoleBinding
#metadata:
#  name: jenkins-deployer
#  namespace: jenkins
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: ClusterRole
#  name: cluster-admin
#subjects:
#  - kind: ServiceAccount
#    name: jenkins-deployer
#    namespace: jenkins
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  type: NodePort
  ports:
    - name: httpport
      port: 8080
      nodePort: 30380
      targetPort: 8080
     # protocol: TCP
    - name: jnlpport
      port: 50000
      #nodePort: 30350
      #protocol: TCP
    - name: http
      port: 80
      #nodePort: 30280
      targetPort: 8080
  selector:
    app: jenkins
